// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/blofeld.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif


// validate (ensure exported C++ functions exist before calling them)
static int _blofeld_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _blofeld_RcppExport_registerCCallable() { 
    R_RegisterCCallable("blofeld", "_blofeld_RcppExport_validate", (DL_FUNC)_blofeld_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_blofeld_module();
RcppExport SEXP _rcpp_module_boot_wrap_class_example();

static const R_CallMethodDef CallEntries[] = {
    {"_rcpp_module_boot_blofeld_module", (DL_FUNC) &_rcpp_module_boot_blofeld_module, 0},
    {"_rcpp_module_boot_wrap_class_example", (DL_FUNC) &_rcpp_module_boot_wrap_class_example, 0},
    {"_blofeld_RcppExport_registerCCallable", (DL_FUNC) &_blofeld_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_blofeld(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
